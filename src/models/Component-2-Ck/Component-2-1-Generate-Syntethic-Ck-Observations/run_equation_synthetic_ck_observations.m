% The following script is devoted to generate the synthetic observations of Ck.
% By using the reverse equation of Sul in terms of Ck and by replacing the
% Lx_obs with Lx_ML, we can define synthetic values of Ck to be used to
% train ML models in Component 2 of Hybrid-EBM

%% Add path and directory
addpath(genpath("..\..\..\..\src\lib\utility\"));
addpath(genpath("..\..\..\..\models\Component-1-Lx\"));
addpath(genpath("..\..\..\..\data\raw\Component-2-Ck\Input-Features-For-Synthetic-Ck-Obs-Generation\"));
addpath(genpath("..\..\..\..\data\raw\Component-2-Ck\"));
addpath(genpath("..\..\Component-3-Qul\"));

%% Read dataset
features_dataset = import_dataset("Input-Features-For-Synthetic-Ck-Obs.xlsx", 10, "A2:J1462", "Sheet1", ...
    ["Date","Qriver","Qll", "Qtide", "Sll", "Socean", "h", "Ly", "utide", "Sul"], ...
    ["datetime", "double", "double", "double", "double", "double", "double", "double", "double", "double"]);

%% Load ML model to predict Lx
load("Component-1-Lx-Models.mat");
RF_model_Lx = component_1_trained_models.RF.model;
LSBoost_model_Lx = component_1_trained_models.LSBoost.model;

%% Compute Lx prediction
rf_pred = RF_model_Lx.predictFcn(features_dataset(:,["Qll","Qriver","Qtide","Sll"]));
lsboost_pred = LSBoost_model_Lx.predictFcn(features_dataset(:,["Qll","Qriver","Qtide","Sll"]));
features_dataset.Lx_RF_Pred = rf_pred;
features_dataset.Lx_LSBoost_Pred = lsboost_pred;

for i = 1:height(features_dataset)
    features_dataset.Qul(i) = compute_qul(features_dataset.Qriver(i), ...
        features_dataset.Qll(i), features_dataset.Qtide(i));

    features_dataset.Ck_RF(i) = generate_synthetic_ck( ...
        features_dataset.Sul(i),...
        features_dataset.Qul(i),...
        features_dataset.Lx_RF_Pred(i), ...
        features_dataset.h(i), ...
        features_dataset.Ly(i),...
        features_dataset.Socean(i),...
        features_dataset.utide(i),...
        features_dataset.Qll(i),...
        features_dataset.Sll(i));
    
    features_dataset.Ck_LSBoost(i) = generate_synthetic_ck(...
        features_dataset.Sul(i),...
        features_dataset.Qul(i),...
        features_dataset.Lx_LSBoost_Pred(i), ...
        features_dataset.h(i), ...
        features_dataset.Ly(i),...
        features_dataset.Socean(i),...
        features_dataset.utide(i),...
        features_dataset.Qll(i),...
        features_dataset.Sll(i));    
end

features_dataset.Year = year(features_dataset.Date);
features_dataset.Doy =  transpose([linspace(1, sum(features_dataset.Year == 2016), sum(features_dataset.Year == 2016))...
 linspace(1, sum(features_dataset.Year == 2017), sum(features_dataset.Year == 2017))...
 linspace(1, sum(features_dataset.Year == 2018), sum(features_dataset.Year == 2018))...
 linspace(1, sum(features_dataset.Year == 2019), sum(features_dataset.Year == 2019))]);

%% Remove missed data
idx_missed_data = features_dataset.Qriver == -999 | features_dataset.Sul==-999;
features_dataset.Ck_RF(idx_missed_data) = -999;
features_dataset.Ck_LSBoost(idx_missed_data) = -999;

%% Retrive the dataset
ck_dataset_rf = features_dataset(:,["Year","Doy", "Qriver","Qtide","Socean","Ck_RF"]);
ck_dataset_rf = renamevars(ck_dataset_rf,"Ck_RF","CkObs");
ck_dataset_lsboost = features_dataset(:,["Year","Doy", "Qriver","Qtide","Socean","Ck_LSBoost"]);
ck_dataset_lsboost = renamevars(ck_dataset_lsboost,"Ck_LSBoost","CkObs");

%% save dataset
writetable(ck_dataset_rf,"..\..\..\..\data\raw\Component-2-Ck\Ck-Obs-RF\Ck-Dataset-RF.xlsx", "WriteRowNames", true);
writetable(ck_dataset_lsboost,"..\..\..\..\data\raw\Component-2-Ck\Ck-Obs-LSBoost\Ck-Dataset-LSBoost.xlsx", "WriteRowNames", true);