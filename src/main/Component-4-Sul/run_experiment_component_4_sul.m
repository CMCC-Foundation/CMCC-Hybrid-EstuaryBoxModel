%% Add path and directory
addpath(genpath("..\..\..\src\lib\utility\"));
addpath(genpath("..\..\..\models\Component-1-Lx"));
addpath(genpath("..\..\..\models\Component-2-Ck"));
addpath(genpath("..\..\..\models\Component-4-Sul"));
addpath(genpath("..\..\..\data\input\Component-2-Ck\Synthetic-Ck-Observations-Generation"));
addpath(genpath("..\Component-3-Qul\"))

%% Read dataset
features_dataset = import_dataset("Features-Synthetic-Ck.xlsx", 12, "A2:L1462", "Sheet1", ...
    ["Date","Qriver","Qll", "Qtide", "Sll", "Socean", "h", "Ly", "utide", "Sul", "Sul_EBM", "Dataset"], ...
    ["datetime", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "categorical"]);

features_test_dataset = features_dataset(features_dataset.Dataset == "Test",:);

%% Load ML model to predict Lx
load("Component-1-Lx-Models.mat");
RF_model_Lx = component_1_trained_models.RF.model;
LSBoost_model_Lx = component_1_trained_models.LSBoost.model;

%% Load ML model to predict Ck
load("Component-2-Ck-Models.mat");
RF_model_Ck = component_2_trained_models.random_forest.model;
LSBoost_model_Ck = component_2_trained_models.lsboost.model;

%% Compute Lx prediction
rf_pred = RF_model_Lx.predictFcn(features_test_dataset(:,["Qll","Qriver","Qtide","Sll"]));
lsboost_pred = LSBoost_model_Lx.predictFcn(features_test_dataset(:,["Qll","Qriver","Qtide","Sll"]));
features_test_dataset.Lx_RF_Pred = rf_pred;
features_test_dataset.Lx_LSBoost_Pred = lsboost_pred;

%% Compute Ck prediction
rf_pred = RF_model_Ck.predictFcn(features_test_dataset(:,["Qriver","Qtide","Socean"]));
lsboost_pred = LSBoost_model_Ck.predictFcn(features_test_dataset(:,["Qriver","Qtide","Socean"]));
features_test_dataset.Ck_RF_Pred = rf_pred;
features_test_dataset.CK_LSBoost_Pred = lsboost_pred;

for i = 1:height(features_test_dataset)
    features_test_dataset.Sul_Hybrid_EBM_RF(i) = compute_sul( ...
        features_test_dataset.Sll(i),...
        features_test_dataset.Qll(i),...
        features_test_dataset.Socean(i), ...
        features_test_dataset.Qtide(i), ...
        features_test_dataset.Ck_RF_Pred(i),...
        features_test_dataset.Ly(i),...
        features_test_dataset.utide(i),...
        features_test_dataset.h(i),...
        features_test_dataset.Lx_RF_Pred(i), ...
        features_test_dataset.Qriver(i));
    
    features_test_dataset.Sul_Hybrid_EBM_LSBoost(i) = compute_sul( ...
        features_test_dataset.Sll(i),...
        features_test_dataset.Qll(i),...
        features_test_dataset.Socean(i), ...
        features_test_dataset.Qtide(i), ...
        features_test_dataset.CK_LSBoost_Pred(i),...
        features_test_dataset.Ly(i),...
        features_test_dataset.utide(i),...
        features_test_dataset.h(i),...
        features_test_dataset.Lx_LSBoost_Pred(i), ...
        features_test_dataset.Qriver(i));   
end

%% Create table for stroring training and test results
algorithm_names = {'EBM','Hybrid_EBM_RF','Hybrid_EBM_LSBoost'};
metrics_names = {'RMSE','NRMSE', 'MAE','RSE', 'RRSE','RAE', 'R2', 'Corr Coeff'};
pwbX = [1 5 10 20 30];

pwbTable = table('Size',[numel(pwbX) numel(algorithm_names)],...
    'VariableTypes', repmat({'double'}, 1, numel(algorithm_names)), ...
    'VariableNames', algorithm_names,...
    'RowNames', strcat('PWB',string(pwbX)));

results_test = table('Size', [numel(algorithm_names) numel(metrics_names)], ...
    'VariableTypes', repmat({'double'}, 1, numel(metrics_names)), ...
    'VariableNames', metrics_names,...
    'RowNames', algorithm_names);

%% Compute metrics
results_test = compute_metrics(features_test_dataset.Sul,features_test_dataset.Sul_EBM,algorithm_names(1), results_test);
results_test = compute_metrics(features_test_dataset.Sul,features_test_dataset.Sul_Hybrid_EBM_RF,algorithm_names(2), results_test);
results_test = compute_metrics(features_test_dataset.Sul,features_test_dataset.Sul_Hybrid_EBM_LSBoost,algorithm_names(3), results_test);

pwbTable = create_pwb_table(features_test_dataset.Sul,features_test_dataset.Sul_EBM,...
    pwbTable, algorithm_names(1), pwbX);
pwbTable = create_pwb_table(features_test_dataset.Sul,features_test_dataset.Sul_Hybrid_EBM_RF,...
    pwbTable, algorithm_names(2), pwbX);
pwbTable = create_pwb_table(features_test_dataset.Sul,features_test_dataset.Sul_Hybrid_EBM_LSBoost,...
    pwbTable, algorithm_names(3), pwbX);

%% display results: metrics and pwb-table
clc;
disp("Test results")
disp("--------------------------------------------------------")
disp(results_test(:,["RMSE","MAE","Corr Coeff"]));
disp(pwbTable);

%% display results: perfect-fit-plot and response-plot
% Test dataset results
test_table_results = array2table([ ...
    features_test_dataset.Sul ...
    features_test_dataset.Sul_EBM ...
    features_test_dataset.Sul_Hybrid_EBM_RF ...
    features_test_dataset.Sul_Hybrid_EBM_LSBoost,...
],"VariableNames",{'real_sul','ebm_pred', 'hyb_rf_pred', 'hyb_lsb_pred'});

create_component_1_results_plot(test_table_results,algorithm_names, true, ...
    30, 40, 'Sul');

%% Save results
writetable(features_test_dataset, '..\..\..\models\Component-4-Sul\Component-4-Sul-Predictions.xlsx', 'WriteRowNames',true);
writetable(results_test, '..\..\..\models\Component-4-Sul\Component-4-Sul-Test-Results.xlsx', 'WriteRowNames',true);
writetable(pwbTable, "..\..\..\models\Component-4-Sul\Component-4-Sul-PwbTable.xlsx", "WriteRowNames", true);